ALL BUGS:

1) GREP NOT WORKING
2) "CAT (space)" not working
3)  Ctrl + l would result in a continuation of the previous line
    - Resolved by adding a condition in keyboard read that would enable enter flag and send in empty buffer, similar to pressing enter. Enter flag would then be disabled within a condition in keyboard read
4) PAGE FAULT EXITING OUT OF TERMS 1 AND 2
    - problem with all shells being in one terminal then trying to exit out the other terminals --> you get a page fault
5) BOOTLOOP WHEN YOU TYPE IN A COMMAND IN ONE TERMINAL (NO ENTER), GO TO ANOTHER TERMINAL (EXECUTE COMMAND IN ANOTHER TERMINAL), GO BACK TO FIRST TERMINAL AND EXECUTE THE WRITTEN OUT COMMAND
6) If keys were entered into the keyboard buffer and were all deleted and then enter was pressed, OS thought command was entered and would produce "no such command"
    - Resolved by specifically removing the char from the line_char_buffer and replacing it with null terminating character
7) When CAPS lock is in and shift is pressed, the keys would still enter in uppercase
    - Resolved by creating a new char array that would map correctly to the caps and shift case
8) Pressing the enter key would go to next line but the "391OS>" would not show up and the blank cursor would show
    - Resolved by sending an empty buffer into keyboard read, therefore it would continue in shell to the next potential line
9) Would occasionally page fault in execute when process finishes - issue with halt
10) Dereferencing NULL did not throw Page Fault Exception
    - dollar signs were missing in asm volatile
11) Keyboard was entering incorrect keys when pressed
    - incorrect keyboard scan codes were used
12) Interrupts were not being thrown or handled correctly
    - EOI was not being sent to both master and slave PIC
13) PIC was not being initialized properly
    - Masked the PIC ports after ICW4 was initialized
14) RTC frequency was not changing appropriately
    - Data was being sent to wrong port
15) "cat rtc" did not wait before running nothing
    - Fixed rtc_read to check for changes in flag as opposed to changing flag
16) Lack of wrapper functions prior to device handlers caused errors
17) read_data was not printing out entire file
    - Stopped ignoring NULL characters
18) Typing past the screen would wrap around and overwrite line instead of going to next line
19) Boot-looping caused by incorrectly setting up IDT entries
20) Compiler error caused by incorrect pointer array declaration - cause of error not resolved, but bug is resolved
21) PIT handler was running before setting up shells, however shells need to be set up first in order for scheduling to work properly - added flag to fix it
22) "cat ." would print the files in the directory but would space them improperly
23) Switching terminals from 1 to 3 causes page fault in terminal 3
24) "no such command" appears twice every time improper command is entered
25) Switching terminals causes keyboard to stop working from time to time
26) Typing in "ls" command causes it execute twice once your in a different shell
27) Switching terminals causes kernel to boot loop
28) Switching terminals causes process that terminal to stop executing
29) Running process in one terminal did not allow another process to run in a different terminal (fish in terminal 1 and 2 and counter in 3)
30) Keyboard read continues to return if enter is spammed
31) Running "hello" in one terminal and then switching to a different terminal and entering in keyboard buffer causes second terminal to execute first terminal's "hello"
32) CTRL and SHIFT were recognized when pressed, but not recognized when released
    - Resolved by creating flags for CTRL and SHIFT, and enabling and disabling them when keyboard recognized scan or escape codes for the respective buttons
33) Creating a process in one terminal and creating a terminal afterwards stops the original process
34) Initially, running hello would result in your name being printed in the same line as "391OS"
    -Resolved by adding a newline char at the end of the keyboard input in the global buffer
35) As a result of the previous addition, exit was no longer being recognized as a command
    - Resolved by checking whether the keyboard input was "exit" in keyboard. If so, do not add the new line character, and return the corresponding number of bytes
36) If the whole line_char_buffer was filled, then hitting enter would result in going to a new line that was completely black
    - Resolved by replacing the last char in the buffer with a new line char
37) Visually changing the change in terminal instead of changing PCB
38) Boot loop because ESP, EBP were not saved at all from the old process
39) Processes still show in the background of other terminals - not writing to non-video memory
40) vidmap system call mapped page directory entries to same page table, thus causing the page table to have the same pointer
41)
